"C:\Users\Arbaz Khan\PycharmProjects\Previous_Practice\venv\Scripts\python.exe" "C:/Users/Arbaz Khan/PycharmProjects/Previous_Practice/Previous_Practice.py"
Help on package pyautogui:

NAME
    pyautogui

DESCRIPTION
    # PyAutoGUI lets Python control the mouse and keyboard, and other GUI automation tasks. For Windows, macOS, and Linux,
    # on Python 3 and 2.
    # https://github.com/asweigart/pyautogui
    # Al Sweigart al@inventwithpython.com (Send me feedback & suggestions!)

PACKAGE CONTENTS
    __main__
    _pyautogui_java
    _pyautogui_osx
    _pyautogui_win
    _pyautogui_x11

SUBMODULES
    platformModule

CLASSES
    builtins.Exception(builtins.BaseException)
        PyAutoGUIException
            FailSafeException
            ImageNotFoundException
    builtins.tuple(builtins.object)
        Point
        Size

    class FailSafeException(PyAutoGUIException)
     |  This exception is raised by PyAutoGUI functions when the user puts the mouse cursor into one of the "failsafe
     |  points" (by default, one of the four corners of the primary monitor). This exception shouldn't be caught; it's
     |  meant to provide a way to terminate a misbehaving script.
     |
     |  Method resolution order:
     |      FailSafeException
     |      PyAutoGUIException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |
     |  Data descriptors inherited from PyAutoGUIException:
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __reduce__(...)
     |      Helper for pickle.
     |
     |  __repr__(self, /)
     |      Return repr(self).
     |
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |
     |  __setstate__(...)
     |
     |  __str__(self, /)
     |      Return str(self).
     |
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |
     |  __cause__
     |      exception cause
     |
     |  __context__
     |      exception context
     |
     |  __dict__
     |
     |  __suppress_context__
     |
     |  __traceback__
     |
     |  args

    class ImageNotFoundException(PyAutoGUIException)
     |  This exception is the PyAutoGUI version of PyScreeze's `ImageNotFoundException`, which is raised when a locate*()
     |  function call is unable to find an image.
     |
     |  Ideally, `pyscreeze.ImageNotFoundException` should never be raised by PyAutoGUI.
     |
     |  Method resolution order:
     |      ImageNotFoundException
     |      PyAutoGUIException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |
     |  Data descriptors inherited from PyAutoGUIException:
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __reduce__(...)
     |      Helper for pickle.
     |
     |  __repr__(self, /)
     |      Return repr(self).
     |
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |
     |  __setstate__(...)
     |
     |  __str__(self, /)
     |      Return str(self).
     |
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |
     |  __cause__
     |      exception cause
     |
     |  __context__
     |      exception context
     |
     |  __dict__
     |
     |  __suppress_context__
     |
     |  __traceback__
     |
     |  args

    class Point(builtins.tuple)
     |  Point(x, y)
     |
     |  Point(x, y)
     |
     |  Method resolution order:
     |      Point
     |      builtins.tuple
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __getnewargs__(self)
     |      Return self as a plain tuple.  Used by copy and pickle.
     |
     |  __repr__(self)
     |      Return a nicely formatted representation string
     |
     |  _asdict(self)
     |      Return a new dict which maps field names to their values.
     |
     |  _replace(self, /, **kwds)
     |      Return a new Point object replacing specified fields with new values
     |
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |
     |  _make(iterable) from builtins.type
     |      Make a new Point object from a sequence or iterable
     |
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |
     |  __new__(_cls, x, y)
     |      Create new instance of Point(x, y)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  x
     |      Alias for field number 0
     |
     |  y
     |      Alias for field number 1
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |
     |  _field_defaults = {}
     |
     |  _fields = ('x', 'y')
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |
     |  __add__(self, value, /)
     |      Return self+value.
     |
     |  __contains__(self, key, /)
     |      Return key in self.
     |
     |  __eq__(self, value, /)
     |      Return self==value.
     |
     |  __ge__(self, value, /)
     |      Return self>=value.
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __getitem__(self, key, /)
     |      Return self[key].
     |
     |  __gt__(self, value, /)
     |      Return self>value.
     |
     |  __hash__(self, /)
     |      Return hash(self).
     |
     |  __iter__(self, /)
     |      Implement iter(self).
     |
     |  __le__(self, value, /)
     |      Return self<=value.
     |
     |  __len__(self, /)
     |      Return len(self).
     |
     |  __lt__(self, value, /)
     |      Return self<value.
     |
     |  __mul__(self, value, /)
     |      Return self*value.
     |
     |  __ne__(self, value, /)
     |      Return self!=value.
     |
     |  __rmul__(self, value, /)
     |      Return value*self.
     |
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |
     |  index(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |
     |      Raises ValueError if the value is not present.
     |
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.tuple:
     |
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585

    class PyAutoGUIException(builtins.Exception)
     |  PyAutoGUI code will raise this exception class for any invalid actions. If PyAutoGUI raises some other exception,
     |  you should assume that this is caused by a bug in PyAutoGUI itself. (Including a failure to catch potential
     |  exceptions raised by PyAutoGUI.)
     |
     |  Method resolution order:
     |      PyAutoGUIException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |
     |  Data descriptors defined here:
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __reduce__(...)
     |      Helper for pickle.
     |
     |  __repr__(self, /)
     |      Return repr(self).
     |
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |
     |  __setstate__(...)
     |
     |  __str__(self, /)
     |      Return str(self).
     |
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |
     |  __cause__
     |      exception cause
     |
     |  __context__
     |      exception context
     |
     |  __dict__
     |
     |  __suppress_context__
     |
     |  __traceback__
     |
     |  args

    class Size(builtins.tuple)
     |  Size(width, height)
     |
     |  Size(width, height)
     |
     |  Method resolution order:
     |      Size
     |      builtins.tuple
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __getnewargs__(self)
     |      Return self as a plain tuple.  Used by copy and pickle.
     |
     |  __repr__(self)
     |      Return a nicely formatted representation string
     |
     |  _asdict(self)
     |      Return a new dict which maps field names to their values.
     |
     |  _replace(self, /, **kwds)
     |      Return a new Size object replacing specified fields with new values
     |
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |
     |  _make(iterable) from builtins.type
     |      Make a new Size object from a sequence or iterable
     |
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |
     |  __new__(_cls, width, height)
     |      Create new instance of Size(width, height)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  width
     |      Alias for field number 0
     |
     |  height
     |      Alias for field number 1
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |
     |  _field_defaults = {}
     |
     |  _fields = ('width', 'height')
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |
     |  __add__(self, value, /)
     |      Return self+value.
     |
     |  __contains__(self, key, /)
     |      Return key in self.
     |
     |  __eq__(self, value, /)
     |      Return self==value.
     |
     |  __ge__(self, value, /)
     |      Return self>=value.
     |
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |
     |  __getitem__(self, key, /)
     |      Return self[key].
     |
     |  __gt__(self, value, /)
     |      Return self>value.
     |
     |  __hash__(self, /)
     |      Return hash(self).
     |
     |  __iter__(self, /)
     |      Implement iter(self).
     |
     |  __le__(self, value, /)
     |      Return self<=value.
     |
     |  __len__(self, /)
     |      Return len(self).
     |
     |  __lt__(self, value, /)
     |      Return self<value.
     |
     |  __mul__(self, value, /)
     |      Return self*value.
     |
     |  __ne__(self, value, /)
     |      Return self!=value.
     |
     |  __rmul__(self, value, /)
     |      Return value*self.
     |
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |
     |  index(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |
     |      Raises ValueError if the value is not present.
     |
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.tuple:
     |
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585

FUNCTIONS
    click(x=None, y=None, clicks=1, interval=0.0, button='primary', duration=0.0, tween=<function linear at 0x000001FE17DB5430>, logScreenshot=None, _pause=True)
        Performs pressing a mouse button down and then immediately releasing it. Returns ``None``.

        When no arguments are passed, the primary mouse button is clicked at the mouse cursor's current location.

        If integers for ``x`` and ``y`` are passed, the click will happen at that XY coordinate. If ``x`` is a string, the
        string is an image filename that PyAutoGUI will attempt to locate on the screen and click the center of. If ``x``
        is a sequence of two coordinates, those coordinates will be used for the XY coordinate to click on.

        The ``clicks`` argument is an int of how many clicks to make, and defaults to ``1``.

        The ``interval`` argument is an int or float of how many seconds to wait in between each click, if ``clicks`` is
        greater than ``1``. It defaults to ``0.0`` for no pause in between clicks.

        The ``button`` argument is one of the constants ``LEFT``, ``MIDDLE``, ``RIGHT``, ``PRIMARY``, or ``SECONDARY``.
        It defaults to ``PRIMARY`` (which is the left mouse button, unless the operating system has been set for
        left-handed users.)

        If ``x`` and ``y`` are specified, and the click is not happening at the mouse cursor's current location, then
        the ``duration`` argument is an int or float of how many seconds it should take to move the mouse to the XY
        coordinates. It defaults to ``0`` for an instant move.

        If ``x`` and ``y`` are specified and ``duration`` is not ``0``, the ``tween`` argument is a tweening function
        that specifies the movement pattern of the mouse cursor as it moves to the XY coordinates. The default is a
        simple linear tween. See the PyTweening module documentation for more details.

        The ``pause`` parameter is deprecated. Call the ``pyautogui.sleep()`` function to implement a pause.

        Raises:
          PyAutoGUIException: If button is not one of 'left', 'middle', 'right', 1, 2, 3

    countdown(seconds)

    displayMousePosition(xOffset=0, yOffset=0)
        This function is meant to be run from the command line. It will
        automatically display the location and RGB of the mouse cursor.

    doubleClick(x=None, y=None, interval=0.0, button='left', duration=0.0, tween=<function linear at 0x000001FE17DB5430>, logScreenshot=None, _pause=True)
        Performs a double click.

        This is a wrapper function for click('left', x, y, 2, interval).

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          x (int, float, None, tuple, optional): The x position on the screen where the
            click happens. None by default. If tuple, this is used for x and y.
            If x is a str, it's considered a filename of an image to find on
            the screen with locateOnScreen() and click the center of.
          y (int, float, None, optional): The y position on the screen where the
            click happens. None by default.
          interval (float, optional): The number of seconds in between each click,
            if the number of clicks is greater than 1. 0.0 by default, for no
            pause in between clicks.
          button (str, int, optional): The mouse button released. TODO

        Returns:
          None

        Raises:
          PyAutoGUIException: If button is not one of 'left', 'middle', 'right', 1, 2, 3, 4,
            5, 6, or 7

    drag = dragRel(xOffset=0, yOffset=0, duration=0.0, tween=<function linear at 0x000001FE17DB5430>, button='primary', logScreenshot=None, _pause=True, mouseDownUp=True)
        Performs a mouse drag (mouse movement while a button is held down) to a
        point on the screen, relative to its current position.

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          x (int, float, None, tuple, optional): How far left (for negative values) or
            right (for positive values) to move the cursor. 0 by default. If tuple, this is used for xOffset and yOffset.
          y (int, float, None, optional): How far up (for negative values) or
            down (for positive values) to move the cursor. 0 by default.
          duration (float, optional): The amount of time it takes to move the mouse
            cursor to the new xy coordinates. If 0, then the mouse cursor is moved
            instantaneously. 0.0 by default.
          tween (func, optional): The tweening function used if the duration is not
            0. A linear tween is used by default.
          button (str, int, optional): The mouse button released. TODO
          mouseDownUp (True, False): When true, the mouseUp/Down actions are not performed.
            Which allows dragging over multiple (small) actions. 'True' by default.

        Returns:
          None

    dragRel(xOffset=0, yOffset=0, duration=0.0, tween=<function linear at 0x000001FE17DB5430>, button='primary', logScreenshot=None, _pause=True, mouseDownUp=True)
        Performs a mouse drag (mouse movement while a button is held down) to a
        point on the screen, relative to its current position.

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          x (int, float, None, tuple, optional): How far left (for negative values) or
            right (for positive values) to move the cursor. 0 by default. If tuple, this is used for xOffset and yOffset.
          y (int, float, None, optional): How far up (for negative values) or
            down (for positive values) to move the cursor. 0 by default.
          duration (float, optional): The amount of time it takes to move the mouse
            cursor to the new xy coordinates. If 0, then the mouse cursor is moved
            instantaneously. 0.0 by default.
          tween (func, optional): The tweening function used if the duration is not
            0. A linear tween is used by default.
          button (str, int, optional): The mouse button released. TODO
          mouseDownUp (True, False): When true, the mouseUp/Down actions are not performed.
            Which allows dragging over multiple (small) actions. 'True' by default.

        Returns:
          None

    dragTo(x=None, y=None, duration=0.0, tween=<function linear at 0x000001FE17DB5430>, button='primary', logScreenshot=None, _pause=True, mouseDownUp=True)
        Performs a mouse drag (mouse movement while a button is held down) to a
        point on the screen.

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          x (int, float, None, tuple, optional): How far left (for negative values) or
            right (for positive values) to move the cursor. 0 by default. If tuple, this is used for x and y.
            If x is a str, it's considered a filename of an image to find on
            the screen with locateOnScreen() and click the center of.
          y (int, float, None, optional): How far up (for negative values) or
            down (for positive values) to move the cursor. 0 by default.
          duration (float, optional): The amount of time it takes to move the mouse
            cursor to the new xy coordinates. If 0, then the mouse cursor is moved
            instantaneously. 0.0 by default.
          tween (func, optional): The tweening function used if the duration is not
            0. A linear tween is used by default.
          button (str, int, optional): The mouse button released. TODO
          mouseDownUp (True, False): When true, the mouseUp/Down actions are not performed.
            Which allows dragging over multiple (small) actions. 'True' by default.

        Returns:
          None

    failSafeCheck()

    getInfo()

    getPointOnLine(x1, y1, x2, y2, n)
        Returns an (x, y) tuple of the point that has progressed a proportion ``n`` along the line defined by the two
        ``x1``, ``y1`` and ``x2``, ``y2`` coordinates.

        This function was copied from pytweening module, so that it can be called even if PyTweening is not installed.

    hold(keys, logScreenshot=None, _pause=True)
        Context manager that performs a keyboard key press down upon entry,
        followed by a release upon exit.

        Args:
          key (str, list): The key to be pressed. The valid names are listed in
          KEYBOARD_KEYS. Can also be a list of such strings.
          pause (float, optional): How many seconds in the end of function process.
          None by default, for no pause in the end of function process.
        Returns:
          None

    hotkey(*args, **kwargs)
        Performs key down presses on the arguments passed in order, then performs
        key releases in reverse order.

        The effect is that calling hotkey('ctrl', 'shift', 'c') would perform a
        "Ctrl-Shift-C" hotkey/keyboard shortcut press.

        Args:
          key(s) (str): The series of keys to press, in order. This can also be a
            list of key strings to press.
          interval (float, optional): The number of seconds in between each press.
            0.0 by default, for no pause in between presses.

        Returns:
          None

    hscroll(clicks, x=None, y=None, logScreenshot=None, _pause=True)
        Performs an explicitly horizontal scroll of the mouse scroll wheel,
        if this is supported by the operating system. (Currently just Linux.)

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          clicks (int, float): The amount of scrolling to perform.
          x (int, float, None, tuple, optional): The x position on the screen where the
            click happens. None by default. If tuple, this is used for x and y.
          y (int, float, None, optional): The y position on the screen where the
            click happens. None by default.

        Returns:
          None

    isShiftCharacter(character)
        Returns True if the ``character`` is a keyboard key that would require the shift key to be held down, such as
        uppercase letters or the symbols on the keyboard's number row.

    isValidKey(key)
        Returns a Boolean value if the given key is a valid value to pass to
        PyAutoGUI's keyboard-related functions for the current platform.

        This function is here because passing an invalid value to the PyAutoGUI
        keyboard functions currently is a no-op that does not raise an exception.

        Some keys are only valid on some platforms. For example, while 'esc' is
        valid for the Escape key on all platforms, 'browserback' is only used on
        Windows operating systems.

        Args:
          key (str): The key value.

        Returns:
          bool: True if key is a valid value, False if not.

    keyDown(key, logScreenshot=None, _pause=True)
        Performs a keyboard key press without the release. This will put that
        key in a held down state.

        NOTE: For some reason, this does not seem to cause key repeats like would
        happen if a keyboard key was held down on a text field.

        Args:
          key (str): The key to be pressed down. The valid names are listed in
          KEYBOARD_KEYS.

        Returns:
          None

    keyUp(key, logScreenshot=None, _pause=True)
        Performs a keyboard key release (without the press down beforehand).

        Args:
          key (str): The key to be released up. The valid names are listed in
          KEYBOARD_KEYS.

        Returns:
          None

    leftClick(x=None, y=None, interval=0.0, duration=0.0, tween=<function linear at 0x000001FE17DB5430>, logScreenshot=None, _pause=True)
        Performs a left mouse button click.

        This is a wrapper function for click('left', x, y).

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          x (int, float, None, tuple, optional): The x position on the screen where the
            click happens. None by default. If tuple, this is used for x and y.
            If x is a str, it's considered a filename of an image to find on
            the screen with locateOnScreen() and click the center of.
          y (int, float, None, optional): The y position on the screen where the
            click happens. None by default.
          interval (float, optional): The number of seconds in between each click,
            if the number of clicks is greater than 1. 0.0 by default, for no
            pause in between clicks.

        Returns:
          None

    linear(n)
        Returns ``n``, where ``n`` is the float argument between ``0.0`` and ``1.0``. This function is for the default
        linear tween for mouse moving functions.

        This function was copied from PyTweening module, so that it can be called even if PyTweening is not installed.

    locate(*args, **kwargs)
        TODO

    locateAll(*args, **kwargs)
        TODO

    locateAllOnScreen(*args, **kwargs)
        TODO

    locateCenterOnScreen(*args, **kwargs)
        TODO

    locateOnScreen(*args, **kwargs)
        TODO - rewrite this
        minSearchTime - amount of time in seconds to repeat taking
        screenshots and trying to locate a match.  The default of 0 performs
        a single search.

    locateOnWindow(*args, **kwargs)
        TODO

    middleClick(x=None, y=None, interval=0.0, duration=0.0, tween=<function linear at 0x000001FE17DB5430>, logScreenshot=None, _pause=True)
        Performs a middle mouse button click.

        This is a wrapper function for click('middle', x, y).

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          x (int, float, None, tuple, optional): The x position on the screen where the
            click happens. None by default. If tuple, this is used for x and y.
            If x is a str, it's considered a filename of an image to find on
            the screen with locateOnScreen() and click the center of.
          y (int, float, None, optional): The y position on the screen where the
            click happens. None by default.

        Returns:
          None

    mouseDown(x=None, y=None, button='primary', duration=0.0, tween=<function linear at 0x000001FE17DB5430>, logScreenshot=None, _pause=True)
        Performs pressing a mouse button down (but not up).

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          x (int, float, None, tuple, optional): The x position on the screen where the
            mouse down happens. None by default. If tuple, this is used for x and y.
            If x is a str, it's considered a filename of an image to find on
            the screen with locateOnScreen() and click the center of.
          y (int, float, None, optional): The y position on the screen where the
            mouse down happens. None by default.
          button (str, int, optional): The mouse button pressed down. TODO

        Returns:
          None

        Raises:
          PyAutoGUIException: If button is not one of 'left', 'middle', 'right', 1, 2, or 3

    mouseInfo()
        Launches the MouseInfo app. This application provides mouse coordinate information which can be useful when
        planning GUI automation tasks. This function blocks until the application is closed.

    mouseUp(x=None, y=None, button='primary', duration=0.0, tween=<function linear at 0x000001FE17DB5430>, logScreenshot=None, _pause=True)
        Performs releasing a mouse button up (but not down beforehand).

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          x (int, float, None, tuple, optional): The x position on the screen where the
            mouse up happens. None by default. If tuple, this is used for x and y.
            If x is a str, it's considered a filename of an image to find on
            the screen with locateOnScreen() and click the center of.
          y (int, float, None, optional): The y position on the screen where the
            mouse up happens. None by default.
          button (str, int, optional): The mouse button released. TODO

        Returns:
          None

        Raises:
          PyAutoGUIException: If button is not one of 'left', 'middle', 'right', 1, 2, or 3

    move = moveRel(xOffset=None, yOffset=None, duration=0.0, tween=<function linear at 0x000001FE17DB5430>, logScreenshot=False, _pause=True)
        Moves the mouse cursor to a point on the screen, relative to its current
        position.

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          x (int, float, None, tuple, optional): How far left (for negative values) or
            right (for positive values) to move the cursor. 0 by default. If tuple, this is used for x and y.
          y (int, float, None, optional): How far up (for negative values) or
            down (for positive values) to move the cursor. 0 by default.
          duration (float, optional): The amount of time it takes to move the mouse
            cursor to the new xy coordinates. If 0, then the mouse cursor is moved
            instantaneously. 0.0 by default.
          tween (func, optional): The tweening function used if the duration is not
            0. A linear tween is used by default.

        Returns:
          None

    moveRel(xOffset=None, yOffset=None, duration=0.0, tween=<function linear at 0x000001FE17DB5430>, logScreenshot=False, _pause=True)
        Moves the mouse cursor to a point on the screen, relative to its current
        position.

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          x (int, float, None, tuple, optional): How far left (for negative values) or
            right (for positive values) to move the cursor. 0 by default. If tuple, this is used for x and y.
          y (int, float, None, optional): How far up (for negative values) or
            down (for positive values) to move the cursor. 0 by default.
          duration (float, optional): The amount of time it takes to move the mouse
            cursor to the new xy coordinates. If 0, then the mouse cursor is moved
            instantaneously. 0.0 by default.
          tween (func, optional): The tweening function used if the duration is not
            0. A linear tween is used by default.

        Returns:
          None

    moveTo(x=None, y=None, duration=0.0, tween=<function linear at 0x000001FE17DB5430>, logScreenshot=False, _pause=True)
        Moves the mouse cursor to a point on the screen.

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          x (int, float, None, tuple, optional): The x position on the screen where the
            click happens. None by default. If tuple, this is used for x and y.
            If x is a str, it's considered a filename of an image to find on
            the screen with locateOnScreen() and click the center of.
          y (int, float, None, optional): The y position on the screen where the
            click happens. None by default.
          duration (float, optional): The amount of time it takes to move the mouse
            cursor to the xy coordinates. If 0, then the mouse cursor is moved
            instantaneously. 0.0 by default.
          tween (func, optional): The tweening function used if the duration is not
            0. A linear tween is used by default.

        Returns:
          None

    onScreen(x, y=None)
        Returns whether the given xy coordinates are on the primary screen or not.

        Note that this function doesn't work for secondary screens.

        Args:
          Either the arguments are two separate values, first arg for x and second
            for y, or there is a single argument of a sequence with two values, the
            first x and the second y.
            Example: onScreen(x, y) or onScreen([x, y])

        Returns:
          bool: True if the xy coordinates are on the screen at its current
            resolution, otherwise False.

    position(x=None, y=None)
        Returns the current xy coordinates of the mouse cursor as a two-integer tuple.

        Args:
          x (int, None, optional) - If not None, this argument overrides the x in
            the return value.
          y (int, None, optional) - If not None, this argument overrides the y in
            the return value.

        Returns:
          (x, y) tuple of the current xy coordinates of the mouse cursor.

        NOTE: The position() function doesn't check for failsafe.

    press(keys, presses=1, interval=0.0, logScreenshot=None, _pause=True)
        Performs a keyboard key press down, followed by a release.

        Args:
          key (str, list): The key to be pressed. The valid names are listed in
          KEYBOARD_KEYS. Can also be a list of such strings.
          presses (integer, optional): The number of press repetitions.
          1 by default, for just one press.
          interval (float, optional): How many seconds between each press.
          0.0 by default, for no pause between presses.
          pause (float, optional): How many seconds in the end of function process.
          None by default, for no pause in the end of function process.
        Returns:
          None

    printInfo(dontPrint=False)

    raisePyAutoGUIImageNotFoundException(wrappedFunction)
        A decorator that wraps PyScreeze locate*() functions so that the PyAutoGUI user sees them raise PyAutoGUI's
        ImageNotFoundException rather than PyScreeze's ImageNotFoundException. This is because PyScreeze should be
        invisible to PyAutoGUI users.

    rightClick(x=None, y=None, interval=0.0, duration=0.0, tween=<function linear at 0x000001FE17DB5430>, logScreenshot=None, _pause=True)
        Performs a right mouse button click.

        This is a wrapper function for click('right', x, y).

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          x (int, float, None, tuple, optional): The x position on the screen where the
            click happens. None by default. If tuple, this is used for x and y.
            If x is a str, it's considered a filename of an image to find on
            the screen with locateOnScreen() and click the center of.
          y (int, float, None, optional): The y position on the screen where the
            click happens. None by default.
          interval (float, optional): The number of seconds in between each click,
            if the number of clicks is greater than 1. 0.0 by default, for no
            pause in between clicks.

        Returns:
          None

    run(commandStr, _ssCount=None)
        Run a series of PyAutoGUI function calls according to a mini-language
        made for this function. The `commandStr` is composed of character
        commands that represent PyAutoGUI function calls.

        For example, `run('ccg-20,+0c')` clicks the mouse twice, then makes
        the mouse cursor go 20 pixels to the left, then click again.

        Whitespace between commands and arguments is ignored. Command characters
        must be lowercase. Quotes must be single quotes.

        For example, the previous call could also be written as `run('c c g -20, +0 c')`.

        The character commands and their equivalents are here:

        `c` => `click(button=PRIMARY)`
        `l` => `click(button=LEFT)`
        `m` => `click(button=MIDDLE)`
        `r` => `click(button=RIGHT)`
        `su` => `scroll(1) # scroll up`
        `sd` => `scroll(-1) # scroll down`
        `ss` => `screenshot('screenshot1.png') # filename number increases on its own`

        `gX,Y` => `moveTo(X, Y)`
        `g+X,-Y` => `move(X, Y) # The + or - prefix is the difference between move() and moveTo()`
        `dX,Y` => `dragTo(X, Y)`
        `d+X,-Y` => `drag(X, Y) # The + or - prefix is the difference between drag() and dragTo()`

        `k'key'` => `press('key')`
        `w'text'` => `write('text')`
        `h'key,key,key'` => `hotkey(*'key,key,key'.replace(' ', '').split(','))`
        `a'hello'` => `alert('hello')`

        `sN` => `sleep(N) # N can be an int or float`
        `pN` => `PAUSE = N # N can be an int or float`

        `fN(commands)` => for i in range(N): run(commands)

        Note that any changes to `PAUSE` with the `p` command will be undone when
        this function returns. The original `PAUSE` setting will be reset.

        TODO - This function is under development.

    scroll(clicks, x=None, y=None, logScreenshot=None, _pause=True)
        Performs a scroll of the mouse scroll wheel.

        Whether this is a vertical or horizontal scroll depends on the underlying
        operating system.

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          clicks (int, float): The amount of scrolling to perform.
          x (int, float, None, tuple, optional): The x position on the screen where the
            click happens. None by default. If tuple, this is used for x and y.
          y (int, float, None, optional): The y position on the screen where the
            click happens. None by default.

        Returns:
          None

    size()
        Returns the width and height of the screen as a two-integer tuple.

        Returns:
          (width, height) tuple of the screen size, in pixels.

    sleep(seconds)

    tripleClick(x=None, y=None, interval=0.0, button='left', duration=0.0, tween=<function linear at 0x000001FE17DB5430>, logScreenshot=None, _pause=True)
        Performs a triple click.

        This is a wrapper function for click('left', x, y, 3, interval).

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          x (int, float, None, tuple, optional): The x position on the screen where the
            click happens. None by default. If tuple, this is used for x and y.
            If x is a str, it's considered a filename of an image to find on
            the screen with locateOnScreen() and click the center of.
          y (int, float, None, optional): The y position on the screen where the
            click happens. None by default.
          interval (float, optional): The number of seconds in between each click,
            if the number of clicks is greater than 1. 0.0 by default, for no
            pause in between clicks.
          button (str, int, optional): The mouse button released. TODO

        Returns:
          None

        Raises:
          PyAutoGUIException: If button is not one of 'left', 'middle', 'right', 1, 2, 3, 4,
            5, 6, or 7

    typewrite(message, interval=0.0, logScreenshot=None, _pause=True)
        Performs a keyboard key press down, followed by a release, for each of
        the characters in message.

        The message argument can also be list of strings, in which case any valid
        keyboard name can be used.

        Since this performs a sequence of keyboard presses and does not hold down
        keys, it cannot be used to perform keyboard shortcuts. Use the hotkey()
        function for that.

        Args:
          message (str, list): If a string, then the characters to be pressed. If a
            list, then the key names of the keys to press in order. The valid names
            are listed in KEYBOARD_KEYS.
          interval (float, optional): The number of seconds in between each press.
            0.0 by default, for no pause in between presses.

        Returns:
          None

    useImageNotFoundException(value=None)
        When called with no arguments, PyAutoGUI will raise ImageNotFoundException when the PyScreeze locate*() functions
        can't find the image it was told to locate. The default behavior is to return None. Call this function with no
        arguments (or with True as the argument) to have exceptions raised, which is a better practice.

        You can also disable raising exceptions by passing False for the argument.

    vscroll(clicks, x=None, y=None, logScreenshot=None, _pause=True)
        Performs an explicitly vertical scroll of the mouse scroll wheel,
        if this is supported by the operating system. (Currently just Linux.)

        The x and y parameters detail where the mouse event happens. If None, the
        current mouse position is used. If a float value, it is rounded down. If
        outside the boundaries of the screen, the event happens at edge of the
        screen.

        Args:
          clicks (int, float): The amount of scrolling to perform.
          x (int, float, None, tuple, optional): The x position on the screen where the
            click happens. None by default. If tuple, this is used for x and y.
          y (int, float, None, optional): The y position on the screen where the
            click happens. None by default.

        Returns:
          None

    write = typewrite(message, interval=0.0, logScreenshot=None, _pause=True)
        Performs a keyboard key press down, followed by a release, for each of
        the characters in message.

        The message argument can also be list of strings, in which case any valid
        keyboard name can be used.

        Since this performs a sequence of keyboard presses and does not hold down
        keys, it cannot be used to perform keyboard shortcuts. Use the hotkey()
        function for that.

        Args:
          message (str, list): If a string, then the characters to be pressed. If a
            list, then the key names of the keys to press in order. The valid names
            are listed in KEYBOARD_KEYS.
          interval (float, optional): The number of seconds in between each press.
            0.0 by default, for no pause in between presses.

        Returns:
          None

DATA
    DARWIN_CATCH_UP_TIME = 0.01
    FAILSAFE = True
    FAILSAFE_POINTS = [(0, 0), (0, 767), (1365, 0), (1365, 767)]
    G_LOG_SCREENSHOTS_FILENAMES = []
    KEYBOARD_KEYS = ['\t', '\n', '\r', ' ', '!', '"', '#', '$', '%', '&', ...
    KEY_NAMES = ['\t', '\n', '\r', ' ', '!', '"', '#', '$', '%', '&', "'",...
    LEFT = 'left'
    LOG_SCREENSHOTS = False
    LOG_SCREENSHOTS_LIMIT = 10
    MIDDLE = 'middle'
    MINIMUM_DURATION = 0.1
    MINIMUM_SLEEP = 0.05
    PAUSE = 0.1
    PRIMARY = 'primary'
    QWERTY = '`1234567890-=qwertyuiop[]\\asdfghjkl;\'zxcvbnm,./~!@#$%^&*()...
    QWERTZ = r'=1234567890/0qwertzuiop89-asdfghjkl,\yxcvbnm,.7+!@#$%^&*()?...
    RIGHT = 'right'
    SECONDARY = 'secondary'
    absolute_import = _Feature((2, 5, 0, 'alpha', 1), (3, 0, 0, 'alpha', 0...
    division = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 1310...
    print_function = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0)...

VERSION
    0.9.53

FILE
    c:\users\arbaz khan\pycharmprojects\previous_practice\venv\lib\site-packages\pyautogui\__init__.py



Process finished with exit code 0
